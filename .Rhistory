df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(3*pi*x) + rnorm(length(x))
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(3*pi*x) + rnorm(length(x),0,0.01)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(3*pi*x) + rnorm(length(x),0,0.2)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(1.5*pi*x) + rnorm(length(x),0,0.2)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- cos(2*pi*x) + rnorm(length(x),0,0.2)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- cos(2*pi*x) + rnorm(length(x),0,0.01)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(2*pi*x) + rnorm(length(x),0,0.01)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(2*pi*x) + rnorm(length(x),0,0.02)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(2*pi*x) + rnorm(length(x),0,0.2)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(2*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
x <- seq(0,1,by=0.001)
y <- sin(2*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
x <- seq(0,1,by=0.01)
y <- sin(2*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
x <- seq(0,1,by=0.008)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
x <- seq(0,1,by=0.005)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
ggplot(df,aes(x=X,y=Y)) + geom_point() + geom_smooth(method='lm)
ggplot(df,aes(x=X,y=Y)) + geom_point() + geom_smooth(method='lm')
ggplot(df,aes(x=X,y=Y)) + geom_point() + geom_smooth(method='lm',se=FALSE)
y <- sin(2*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
ggplot(df,aes(x=X,y=Y)) + geom_point() + geom_smooth(method='lm',se=FALSE)
y <- sin(2.5*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x,Y=y)
ggplot(df,aes(x=X,y=Y)) + geom_point()
ggplot(df,aes(x=X,y=Y)) + geom_point() + geom_smooth(method='lm',se=FALSE)
summary(lm(Y~X,df))
df <- transform(df, X2=X^2)
df
df <- transform(df, X2=X^2, X3=X^3)
head(df)
df <- transform(df, X2=X^2, X3=X^3)
head(df)
summary(lm(Y~X + X2 + X3,df)) # R^2 is 4.5%
?poly
df <- transform(df, X4 = X^4)
head(df)
df <- transform(df, X4 = X^4, X5=X^5, X7=X^7, X9=X^9, X11=X^11, X13=X^13)
head(df)
summary(lm(Y~X+X2+X3+X4+X5+X7+x9+X11+X13))
summary(lm(Y~X+X2+X3+X4+X5+X7+x9+X11+X13,df))
summary(lm(Y~X+X2+X3+X4+X5+X7+X9+X11+X13,df))
df <- transform(df, X4=X^4, X5=X^5, X6=X^6, X7=X^7, X8=X^8, X9=X^9, X11=X^11, X13=X^13)
summary(lm(Y~X+X2+X3+X4+X5+X6+X7+X8+X9+X11+X13,df))
df <- transform(df, X4=X^4, X5=X^5, X6=X^6, X7=X^7, X8=X^8, X9=X^9, X10=X^10, X11=X^11)
head(df)
df <- data.frame(X=x,Y=y)
df <- transform(df, X2=X^2, X3=X^3)
df <- transform(df, X4=X^4, X5=X^5, X6=X^6, X7=X^7, X8=X^8, X9=X^9, X10=X^10, X11=X^11)
summary(lm(Y~X+X2+X3+X4+X5+X6+X7+X8+X9+X11+X13,df))
summary(lm(Y~X+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11,df))
lm(Y~X^14,df)
predict(lm(Y~X^14,df))
df <- transform(df, PredY = fit)
fit
fit <- predict(lm(Y~X,df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
fit <- predict(lm(Y~X3,df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
fit <- predict(lm(Y~X5,df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
fit <- predict(lm(Y~X11,df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
fit <- predict(lm(Y~poly(X,degree=3),df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
fit <- predict(lm(Y~poly(X,degree=5),df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
fit <- predict(lm(Y~poly(X,degree=7),df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
fit <- predict(lm(Y~poly(X,degree=15),df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
fit <- predict(lm(Y~poly(X,degree=25),df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
df <- transform(df, X4=X^4, X5=X^5, X6=X^6, X7=X^7, X8=X^8, X9=X^9, X10=X^10, X11=X^11,X12=X^12, X13=X^13, X14=X^14,X15=X^15)
head(df)
summary(lm(Y~X+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15,df)) # R^2 is 98%
summary(lm(Y~poly(X,degree=15),df)
)
fit <- predict(lm(Y~poly(X, degree=1),df))
df <- transform(df, PredY = fit)
ggplot(df, aes(x=X,y=PredY)) + geom_point()+geom_line()
fit20 <- predict(lm(Y~poly(X, degree=20),df))
df <- transform(df, PredY20 = fit20)
ggplot(df, aes(x=X,y=PredY20)) + geom_point()+geom_line()
fit5 <- predict(lm(Y~poly(X, degree=5),df))
df <- transform(df, PredY5 = fit5)
ggplot(df, aes(x=X,y=PredY5)) + geom_point()+geom_line()
ggplot(df, aes(x=X,y=PredY3)) + geom_point()+geom_line()
fit3 <- predict(lm(Y~poly(X, degree=3),df))
df <- transform(df, PredY3 = fit3)
ggplot(df, aes(x=X,y=PredY3)) + geom_point()+geom_line()
ggplot(df, aes(x=X,y=PredY5)) + geom_point()+geom_line()
ggplot(df, aes(x=X,y=PredY20)) + geom_point()+geom_line()
fit30 <- predict(lm(Y~poly(X, degree=30),df))
df <- transform(df, PredY30 = fit30)
fit25 <- predict(lm(Y~poly(X, degree=25),df))
df <- transform(df, PredY25 = fit25)
ggplot(df, aes(x=X,y=PredY25)) + geom_point()+geom_line()
ggplot(df, aes(x=X,y=PredY5)) + geom_point()+geom_line()
ggplot(df, aes(x=X,y=PredY25)) + geom_point()+geom_line()+ggtitle('degree = 25')
ggplot(df, aes(x=X,y=PredY25)) + geom_point()+geom_line()+ggtitle('degree = 25')+ylab('Y')
fit1 <- predict(lm(Y~poly(X, degree=1),df))
df <- transform(df, PredY1 = fit1)
ggplot(df, aes(x=X,y=PredY1)) + geom_point()+geom_line()+ggtitle('degree = 1')+ylab('Y')
fit3 <- predict(lm(Y~poly(X, degree=3),df))
df <- transform(df, PredY3 = fit3)
ggplot(df, aes(x=X,y=PredY3)) + geom_point()+geom_line()+ggtitle('degree = 3')+ylab('Y')
fit5 <- predict(lm(Y~poly(X, degree=5),df))
df <- transform(df, PredY5 = fit5)
ggplot(df, aes(x=X,y=PredY5)) + geom_point()+geom_line()+ggtitle('degree = 5')+ylab('Y')
fit25 <- predict(lm(Y~poly(X, degree=25),df))
df <- transform(df, PredY25 = fit25)
ggplot(df, aes(x=X,y=PredY25)) + geom_point()+geom_line()+ggtitle('degree = 25')+ylab('Y')
library(gridExtra)
install.packages('gredExtra')
install.packages('gridExtra')
library(gridExtra)
fit1 <- predict(lm(Y~poly(X, degree=1),df))
df <- transform(df, PredY1 = fit1)
plot1 <- ggplot(df, aes(x=X,y=PredY1)) + geom_point()+geom_line()+ggtitle('degree = 1')+ylab('Y')
fit3 <- predict(lm(Y~poly(X, degree=3),df))
df <- transform(df, PredY3 = fit3)
plot3 <- ggplot(df, aes(x=X,y=PredY3)) + geom_point()+geom_line()+ggtitle('degree = 3')+ylab('Y')
fit5 <- predict(lm(Y~poly(X, degree=5),df))
df <- transform(df, PredY5 = fit5)
plot5 <- ggplot(df, aes(x=X,y=PredY5)) + geom_point()+geom_line()+ggtitle('degree = 5')+ylab('Y')
fit25 <- predict(lm(Y~poly(X, degree=25),df))
df <- transform(df, PredY25 = fit25)
plot25 <- ggplot(df, aes(x=X,y=PredY25)) + geom_point()+geom_line()+ggtitle('degree = 25')+ylab
fit1 <- predict(lm(Y~poly(X, degree=1),df))
df <- transform(df, PredY1 = fit1)
plot1 <- ggplot(df, aes(x=X,y=PredY1)) + geom_point()+geom_line()+ggtitle('degree = 1')+ylab('Y')
fit3 <- predict(lm(Y~poly(X, degree=3),df))
df <- transform(df, PredY3 = fit3)
plot3 <- ggplot(df, aes(x=X,y=PredY3)) + geom_point()+geom_line()+ggtitle('degree = 3')+ylab('Y')
fit5 <- predict(lm(Y~poly(X, degree=5),df))
df <- transform(df, PredY5 = fit5)
plot5 <- ggplot(df, aes(x=X,y=PredY5)) + geom_point()+geom_line()+ggtitle('degree = 5')+ylab('Y')
fit25 <- predict(lm(Y~poly(X, degree=25),df))
df <- transform(df, PredY25 = fit25)
plot25 <- ggplot(df, aes(x=X,y=PredY25)) + geom_point()+geom_line()+ggtitle('degree = 25')+ylab('Y')
grid.arrange(plot1,plot3,plot5,plot25)
x <- seq(0,1,by=0.005)
y <- sin(2.5*pi*x) + rnorm(length(x),0,0.1)
indices <- sort(sample(1:n, round(0.5 * n)))
training.x <- x[indices] training.y <- y[indices]
indices <- sort(sample(1:n, round(0.5 * length(x))))
indices <- sort(sample(1:length(x), round(0.5 * length(x))))
training.x <- x[indices] training.y <- y[indices]
test.x <- x[-indices] test.y <- y[-indices]
training.x <- x[indices]
training.y <- y[indices]
test.x <- x[-indices]
test.y <- y[-indices]
training.df <- data.frame(X = training.x, Y = training.y)
test.df <- data.frame(X = test.x, Y = test.y)
rmse <- function(y,h) return(sqrt(mean(y-h)^2))
rmse
fits <- lm(Y~poly(X,degree=d,data=training.df))
training.df
?do.call
performance <- data.frame()
for (d in 1:20){
fits <- lm(Y~poly(X,degree=d),data=training.df)
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(poly.fit)))
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(poly.fit,
newdata = test.df))))
}
performance <- data.frame()
for (d in 1:20){
fits <- lm(Y~poly(X,degree=d),data=training.df)
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(fits)))
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(fits,
newdata = test.df))))
}
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(fits)))
performance <- data.frame()
for (d in 1:20){
fits <- lm(Y~poly(X,degree=d),data=training.df)
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(fits))))
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(fits,
newdata = test.df))))
}
performance
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) + geom_point() +
geom_line()
performance <- data.frame()
for (d in 1:20){
fits <- lm(Y~poly(X,degree=d),data=training.df)
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(fits))))
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(fits,
newdata = test.df))))
}
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) + geom_point() + geom_line()
performance
rmse <- function(y,h) return(sqrt(mean((y-h)^2)))
performance <- data.frame()
for (d in 1:20){
fits <- lm(Y~poly(X,degree=d),data=training.df)
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(fits))))
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(fits,
newdata = test.df))))
}
performance
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) + geom_point() + geom_line()
performance <- data.frame()
for (d in 1:25){
fits <- lm(Y~poly(X,degree=d),data=training.df)
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(fits))))
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(fits,
newdata = test.df))))
}
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) + geom_point() + geom_line()
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
x <- seq(0,1,by=0.005)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
indices <- sort(sample(1:length(x), round(0.5 * length(x))))
training.x <- x[indices]
training.y <- y[indices]
test.x <- x[-indices]
test.y <- y[-indices]
training.df <- data.frame(X = training.x, Y = training.y)
test.df <- data.frame(X = test.x, Y = test.y)
rmse <- function(y,h) return(sqrt(mean((y-h)^2)))
performance <- data.frame()
for (d in 1:25){
fits <- lm(Y~poly(X,degree=d),data=training.df)
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(fits))))
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(fits,
newdata = test.df))))
}
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) + geom_point() + geom_line()
x <- seq(0,1,by=0.005)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
indices <- sort(sample(1:length(x), round(0.5 * length(x))))
training.x <- x[indices]
training.y <- y[indices]
test.x <- x[-indices]
test.y <- y[-indices]
training.df <- data.frame(X = training.x, Y = training.y)
test.df <- data.frame(X = test.x, Y = test.y)
rmse <- function(y,h) return(sqrt(mean((y-h)^2)))
performance <- data.frame()
for (d in 1:20){
fits <- lm(Y~poly(X,degree=d),data=training.df)
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(fits))))
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(fits,
newdata = test.df))))
}
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) + geom_point() + geom_line()
lm(Y~X)
lm(Y~X,df)
coef(lm(Y~X,df))
sum(coef(lm(Y~X,df)))
sum(coef(lm(Y~X,df))^2)
- abs(coef(lm(Y~X,df))^2)
abs(coef(lm(Y~X,df))^2)
sum(coef(lm(Y~X,df))^2)
- sum(abs(coef(lm(Y~X,df))))
- sum(coef(lm(Y~X,df))^2)
sum(coef(lm(Y~X,df))^2)
sum(abs(coef(lm(Y~X,df))))
install.packages('glmnet')
library(glmnet)
df
x <- seq(0,1,by=0.005)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
x <- matrix(x)
glmnet(x, y)
y
x
x
x
x <- matrix(x)
glmnet(x, y)
?glmnet
y
x
glmnet(x, y)
x=matrix(rnorm(100*20),100,20)
x
y=rnorm(100)
y
fit1=glmnet(x,y)
fit1
x
glmnet(x, y)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
glmnet(x, y)
x <- seq(0,1,by=0.005)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
x <- matrix(x)
glmnet(x, y)
dim(X)
dim(x)
dim(y)
x <- t(matrix(x))
glmnet(x, y)
x
x <- seq(0,1,by=0.005)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
x <- matrix(x)
glmnet(x, y)
glmnet(c(x,x), y)
c(x,x)
glmnet(cbind(x,x), y)
print(glmnet(cbind(x,x), y))
plot(glmnet(cbind(x,x), y))
plot(glmnet(x, y))
glmnet(x, y)
glmnet(x, y)
coef(lm(Y~poly(X,degree=15),df)
)
sum(coef(lm(Y~poly(X,degree=15),df)))
?ot
?dot
1%.%1
1 %.% 1
1 % . % 1
1% . %1
?dot
sum(coef(lm(Y~poly(X,degree=2),df)))
coef(lm(Y~poly(X,degree=2),df))
lm(Y~poly(X,degree=2),df)
cov(lm(Y~poly(X,degree=2),df))
cov(coef(lm(Y~poly(X,degree=2),df)))
cov(poly(X,degree=2))
with(df,cov(poly(X,degree=2)))
with(df,cor(poly(X,degree=2)))
with(df,cor(poly(X,degree=2)))
with(df,cor(poly(X,degree=3)))
with(df,cov(poly(X,degree=3)))
sum(with(df,cov(poly(X,degree=3))))
with(df,cov(poly(X,degree=3)))
head(df)
with(df,cov(poly(X,degree=3)))
with(df,cor(poly(X,degree=3)))
dig(with(df,cor(poly(X,degree=3))))
diag(with(df,cor(poly(X,degree=3))))
upper(with(df,cor(poly(X,degree=3))))
?upper
?lower
?diag
upper.tri(with(df,cor(poly(X,degree=3))))
with(df,cor(poly(X,degree=3)))[upper.tri(with(df,cor(poly(X,degree=3))))]
sum(with(df,cor(poly(X,degree=3)))[upper.tri(with(df,cor(poly(X,degree=3))))])
ortho.coefs <- with(df,cor(poly(X,degree=3)))
ortho.coefs
sum(ortho.coefs[upper.tri(ortho.coefs)])
summary(lm(Y~poly(X,degree=15),df)) # R^2 is 98% and no errors
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) + geom_point() + geom_line()
sum(coef(lm(Y~X,df))^2)
sum(abs(coef(lm(Y~X,df))))
x <- seq(0,1,by=0.005)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
x <- matrix(x)
glmnet(x, y)
x <- seq(0,1,by=0.005)
y <- sin(3*pi*x) + rnorm(length(x),0,0.1)
df <- data.frame(X=x, Y=y)
df
training.x <- df$X[indices]
training.y <- df$Y[indices]
test.x <- df$X[-indices]
test.y <- df$Y[-indices]
indices <- sort(sample(1:length(x), round(0.5 * length(x))))
training.x <- x[indices]
training.y <- y[indices]
test.x <- x[-indices]
test.y <- y[-indices]
training.df <- data.frame(X = training.x, Y = training.y)
test.df <- data.frame(X = test.x, Y = test.y)
rmse <- function(y,h) return(sqrt(mean((y-h)^2)))
performance <- data.frame()
for (d in 1:20){
fits <- lm(Y~poly(X,degree=d),data=training.df)
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(fits))))
performance <- rbind(performance, data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(fits,
newdata = test.df))))
}
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) + geom_point() + geom_line()
library(slidify)
slidify("index.Rmd")
getwd()
setwd('/Users/ilanman/Desktop/Data/Rpres_ML')
slidify("index.Rmd")
Q
slidify("index.Rmd")
install.packages('e1071')
naive_model <- naiveBayes(x = sms_train, y = raw_train_set$type)
library(e1071)
naive_model <- naiveBayes(x = sms_train, y = raw_train_set$type)
sms_data  <- read.table('SMSSpamCollection.txt',stringsAsFactors=FALSE,sep='\t',quote="",
col.names=c("type","text"))
str(sms_data)
sms_data$type <- factor(sms_data$type)
library(tm)
sms_corpus <- Corpus(VectorSource(sms_data$text))
inspect(head(sms_corpus))
corpus_clean <- tm_map(sms_corpus,tolower)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
sms_dtm <- DocumentTermMatrix(corpus_clean)
total_n <- nrow(sms_data)
train_ind <- sample(total_n,total_n*2/3)
dtm_train_set <- sms_dtm[train_ind,]
dtm_test_set <- sms_dtm[-train_ind,]
corpus_train_set <- corpus_clean[train_ind]
corpus_test_set <- corpus_clean[-train_ind]
raw_train_set <- sms_data[train_ind,1:2]
raw_test_set <- sms_data[-train_ind,1:2]
freq_terms <- c(findFreqTerms(dtm_train_set,7))
sms_train <- DocumentTermMatrix(corpus_train_set, list(dictionary = freq_terms))
sms_test <- DocumentTermMatrix(corpus_test_set, list(dictionary = freq_terms))
convert <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0,1), labels=c('No','Yes'))
return(x)
}
sms_train <- apply(sms_train, MARGIN = 2 , convert)
sms_test <- apply(sms_test, MARGIN = 2 , convert)
naive_model <- naiveBayes(x = sms_train, y = raw_train_set$type)
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
